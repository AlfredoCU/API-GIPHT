{"version":3,"sources":["components/Header.js","components/FormCategory.js","components/GifGridItem.js","helpers/getGifs.js","components/GifGrid.js","hooks/useEffectGif.js","containers/App.js","index.js"],"names":["Header","className","FormCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cat","type","placeholder","value","onChange","target","GifGridItem","title","url","alt","src","getGifs","category","a","encodeURI","fetch","res","json","data","gifs","map","img","id","images","downsized_medium","GifGrid","loading","state","setState","useEffect","then","useEffectGif","key","App","categories","ReactDOM","render","document","getElementById"],"mappings":"yLASeA,EAPA,kBACb,yBAAKC,UAAU,oBACb,yBAAKA,UAAU,eACf,6C,OCkCWC,EApCM,SAAC,GAAuB,IAArBC,EAAoB,EAApBA,cAAoB,EACNC,mBAAS,IADH,mBACnCC,EADmC,KACvBC,EADuB,KAmB1C,OACE,0BAAMC,SAba,SAACC,GAEpBA,EAAEC,iBAGEJ,EAAWK,OAAOC,OAAS,IAE7BR,GAAc,SAACS,GAAD,OAAUP,GAAV,mBAAyBO,OACvCN,EAAc,MAKcL,UAAU,iBACtC,2BACEY,KAAK,OACLC,YAAY,oBACZC,MAAOV,EACPW,SAtBoB,SAACR,GACzBF,EAAcE,EAAES,OAAOF,QAsBnBd,UAAU,2BCdHiB,EAZK,SAAC,GAAD,IAAGC,EAAH,EAAGA,MAAOC,EAAV,EAAUA,IAAV,OAClB,yBAAKnB,UAAU,oDACb,yBAAKoB,IAAKF,EAAOG,IAAKF,IACtB,2BAAID,GAAS,oB,uBCNJI,EAAO,uCAAG,WAAOC,GAAP,uBAAAC,EAAA,4DACT,mCACNL,EAFe,iDAEiCM,UACpDF,GAHmB,6BACT,oCADS,SAMHG,MAAMP,GANH,cAMfQ,EANe,gBAOEA,EAAIC,OAPN,uBAObC,EAPa,EAObA,KAEFC,EAAOD,EAAKE,KAAI,SAACC,GAAD,YAAU,CAC9BC,GAAID,EAAIC,GACRf,MAAOc,EAAId,MACXC,IAAG,UAAEa,EAAIE,cAAN,aAAE,EAAYC,iBAAiBhB,QAZf,kBAedW,GAfc,4CAAH,sDC8BLM,EAzBC,SAAC,GAAkB,IAAhBb,EAAe,EAAfA,SAAe,ECFN,SAACA,GAAc,IAAD,EACdpB,mBAAS,CAAE0B,KAAM,GAAIQ,SAAS,IADhB,mBACjCC,EADiC,KAC1BC,EAD0B,KAQxC,OAJAC,qBAAU,WACRlB,EAAQC,GAAUkB,MAAK,SAACX,GAAD,OAAUS,EAAS,CAAEV,KAAMC,EAAMO,SAAS,SAChE,CAACd,IAEGe,EDJ2BI,CAAanB,GAAjCW,EAFkB,EAExBL,KAAcQ,EAFU,EAEVA,QAEtB,OACE,oCACGA,EACC,wBAAIrC,UAAU,YAAd,eAEA,oCACE,wBAAIA,UAAU,YAAYuB,GAC1B,yBAAKvB,UAAU,YACZkC,GACCA,EAAOH,KAAI,SAACC,GAAD,OAAS,kBAAC,EAAD,eAAaW,IAAKX,EAAIC,IAAQD,WECjDY,EAdH,WAAO,IAAD,EACoBzC,mBAAS,CAAC,aAD9B,mBACT0C,EADS,KACG3C,EADH,KAGhB,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,CAAcA,cAAeA,IAC5B2C,EAAWd,KAAI,SAACR,EAAUoB,GAAX,OACd,kBAAC,EAAD,CAASA,IAAG,UAAKA,EAAL,aAAqBpB,SAAUA,S,YCPnDuB,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,U","file":"static/js/main.93d7acf4.chunk.js","sourcesContent":["import React from \"react\";\n\nconst Header = () => (\n  <div className=\"header-conteiner\">\n    <div className=\"header-top\"></div>\n    <h1>Buscar GIFS</h1>\n  </div>\n);\n\nexport default Header;\n","import React, { useState } from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst FormCategory = ({ setCategories }) => {\n  const [inputValue, setInputValue] = useState(\"\");\n\n  const handleImputChange = (e) => {\n    setInputValue(e.target.value);\n  };\n\n  const handleSubmit = (e) => {\n    // Cancela el evento si este es cancelable, sin detener el resto del funcionamiento del evento, es decir, puede ser llamado de nuevo.\n    e.preventDefault();\n\n    // El mÃ©todo trim() elimina los espacios en blanco en ambos extremos del string.\n    if (inputValue.trim().length > 2) {\n      //* El primer argumento es el valor del estado anterior y luego tiene que regresar el nuevo Estado.\n      setCategories((cat) => [inputValue, ...cat]);\n      setInputValue(\"\");\n    }\n  };\n\n  return (\n    <form onSubmit={handleSubmit} className=\"form-category\">\n      <input\n        type=\"text\"\n        placeholder=\"Buscar GIFS de...\"\n        value={inputValue}\n        onChange={handleImputChange}\n        className=\"form-category__imput\"\n      />\n    </form>\n  );\n};\n\nFormCategory.propTypes = {\n  setCategories: PropTypes.func.isRequired,\n};\n\nexport default FormCategory;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\n\nconst GifGridItem = ({ title, url }) => (\n  <div className=\"gif-grid__card animate__animated animate__fadeIn\">\n    <img alt={title} src={url} />\n    <p>{title || \"it has no name\"}</p>\n  </div>\n);\n\nGifGridItem.propTypes = {\n  title: PropTypes.string.isRequired,\n  url: PropTypes.string.isRequired,\n};\n\nexport default GifGridItem;\n","export const getGifs = async (category) => {\n  const key = \"sKIGQtB5GrgbESMLr9L5Drz3BoWTaRM9\";\n  const url = `https://api.giphy.com/v1/gifs/search?q=${encodeURI(\n    category\n  )}&limit=10&api_key=${key}`;\n\n  const res = await fetch(url);\n  const { data } = await res.json();\n\n  const gifs = data.map((img) => ({\n    id: img.id,\n    title: img.title,\n    url: img.images?.downsized_medium.url,\n  }));\n\n  return gifs;\n};\n","import React from \"react\";\nimport GifGridItem from \"../components/GifGridItem\";\nimport PropTypes from \"prop-types\";\nimport { useEffectGif } from \"../hooks/useEffectGif\";\n\nconst GifGrid = ({ category }) => {\n  //* Renombramos la propiedad data a images.\n  const { data: images, loading } = useEffectGif(category);\n\n  return (\n    <>\n      {loading ? (\n        <h1 className=\"category\">Cargando...</h1>\n      ) : (\n        <>\n          <h1 className=\"category\">{category}</h1>\n          <div className=\"gif-grid\">\n            {images &&\n              images.map((img) => <GifGridItem key={img.id} {...img} />)}\n          </div>\n        </>\n      )}\n    </>\n  );\n};\n\nGifGrid.propTypes = {\n  category: PropTypes.string.isRequired,\n};\n\nexport default GifGrid;\n","import { useEffect, useState } from \"react\";\nimport { getGifs } from \"../helpers/getGifs\";\n\nexport const useEffectGif = (category) => {\n  const [state, setState] = useState({ data: [], loading: true });\n\n  //* Es equivalente a un ComponentDidMount.\n  useEffect(() => {\n    getGifs(category).then((gifs) => setState({ data: gifs, loading: false }));\n  }, [category]);\n\n  return state;\n};\n","import React, { useState } from \"react\";\nimport Header from \"../components/Header\";\nimport FormCategory from \"../components/FormCategory\";\nimport GifGrid from \"../components/GifGrid\";\n\nconst App = () => {\n  const [categories, setCategories] = useState([\"Mr.Robot\"]);\n\n  return (\n    <div>\n      <Header />\n      <FormCategory setCategories={setCategories} />\n      {categories.map((category, key) => (\n        <GifGrid key={`${key}-Category`} category={category} />\n      ))}\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"../src/containers/App\";\nimport \"./utils/normalize.css\";\nimport \"./utils/index.css\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n"],"sourceRoot":""}